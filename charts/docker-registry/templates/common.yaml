{{/* Make sure all variables are set properly */}}
{{- include "common.values.setup" . }}

{{/* Create a volume description for the config map/secret */}}
{{- define "docker-registry.configVolumeBase" -}}
name: "docker-registry-config"
enabled: true
readOnly: true
accessMode: "ReadOnlyMany"
mountPath: "{{ .Values.configMountPath }}"
{{- end -}}

{{/* Create a volume mount for the config secret */}}
{{- define "docker-registry.configSecretVolume" -}}
{{ include "docker-registry.configVolumeBase" . }}
type: "secret"
{{- end -}}

{{/* Create a volume mount for the config map */}}
{{- define "docker-registry.configMapVolume" -}}
{{ include "docker-registry.configVolumeBase" . }}
type: "configMap"
{{- end -}}

{{/* Create a secret from passed config data or mount the passed secret name */}}
{{- if .Values.configSecretName -}}
{{- $_ := set .Values.configmap.config "enabled" false -}}
{{- $_ := set .Values.persistence "docker-registry-config" (include "docker-registry.configSecretVolume" . | fromYaml) -}}
{{- else -}}
{{- $_ := set .Values.persistence "docker-registry-config" (include "docker-registry.configMapVolume" . | fromYaml) -}}
{{- end -}}

{{/* If adding prometheus metrics, add the service port */}}
{{- define "docker-registry.prometheusServicePorts" -}}
enabled: true
port: {{ .Values.prometheus.port }}
protocol: "HTTP"
{{- end -}}
{{- define "docker-registry.prometheusPodAnnotations" -}}
prometheus.io/path: {{ .Values.prometheus.path | quote }}
prometheus.io/port: "metrics"
{{- end -}}
{{- if .Values.prometheus.enabled -}}
{{- $_ := set .Values.service.main.ports "metrics" (include "docker-registry.prometheusServicePorts" . | fromYaml) -}}
{{- $_ := set .Values.controller "annotations" (merge .Values.controller.annotations (include "docker-registry.prometheusPodAnnotations" . | fromYaml)) -}}
{{- end -}}

{{/* Render the templates */}}
{{ include "common.all" . }}
